alc<-select(math_por, one_of(join_by))
notjoined_columns<-colnames(math)[!colnames(math)%in%join_by]
for(column_name in notjoined_columms){
two_columns<-select(math_por,starts_with(column_name))
first_column<-select(two_columns,1)[[1]]
if(is.numeric(first_column)){
alc[column_name]<-round(rowMeans(two_columns))
}else {
alc[column_name]<-first_column
}
}
}
}
}
for(column_name in notjoined_columms){
two_columns<-select(math_por,starts_with(column_name))
first_column<-select(two_columns,1)[[1]]
if(is.numeric(first_column)){
alc[column_name]<-round(rowMeans(two_columns))
}else {
alc[column_name]<-first_column
}
}
notjoined_columns<-colnames(math)[!colnames(math)%in%join_by]
for(column_name in notjoined_columms){
two_columns<-select(math_por,starts_with(column_name))
first_column<-select(two_columns,1)[[1]]
if(is.numeric(first_column)){
alc[column_name]<-round(rowMeans(two_columns))
}else {
alc[column_name]<-first_column
}
}
for(column_name in notjoined_columns){
two_columns<-select(math_por,starts_with(column_name))
first_column<-select(two_columns,1)[[1]]
if(is.numeric(first_column)){
alc[column_name]<-round(rowMeans(two_columns))
}else {
alc[column_name]<-first_column
}
}
glimpse(alc)
alc->mutate(alc, alc_use=(Dalc+Walc)/2)
library(dyplr)
library(dpylr)
library(dplyr)
alc->mutate(alc, alc_use=(Dalc+Walc)/2)
library(ggplot2)
alc->mutate(alc, alc_use=(Dalc+Walc)/2)
alc<-mutate(alc, alc_use=(Dalc+Walc)/2)
high_use<-subset(alc, alc_use>2)
high_use
dim(alc)
alc<-mutate(alc, high_use=alc_use>2)
dim(alc)
setwd("~/Documents/IODS-project/Data")
setwd("~/Documents/IODS-project/Data")
write.csv(alc, file="alc.csv",row.names=1)
write.csv(alc, file="alc.csv", row.names=1)
write.csv(alc, file="alc.csv")
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
glimpse(alc)
str(math)
str(por)
dim(math)
dim(por)
dim(math_por)
glimpse(alc)
dim(alc)
```
dim(alc)
colnames(alc)
dim(alc)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
summary(model)
coef(model)
coef(model)
OR<-coef(model)%>%exp
CI<-exp(confint(model))
cbind(OR,CI)
```
probabilities<-predict(m, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
table(high_use=alc$high_use, prediction=alc$prediction)
probabilities<-predict(m, type="response")
probabilities<-predict(model, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
library(ggplot2)
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
loss_func(class=alc$high_use, prob=alc$probability)
loss_func<-function(class,prob){
n_wrong<-abs(class-prob)>0.5
mean(n_wrong)
}
loss_func(class=alc$high_use, prob=alc$probability)
loss_func(class=alc$high_use, prob=alc$probability)
loss_func(class=alc$high_use, prob=alc$probability)
probabilities<-predict(model, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
summary(model)
model2<-glm(high_use~failures+absences+sex, data=alc, family="binomial")
summary(model2)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
model2<-glm(high_use~failures+absences+sex, data=alc, family="binomial")
summary(model2)
model2<-glm(high_use~ failures + absences+sex, data=alc, family="binomial")
summary(model2)
summary(model)
model2<-glm(high_use~studytime, data=alc, family="binomial")
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
probabilities<-predict(model, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
library(ggplot2)
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
loss_func(class=alc$high_use, prob=alc$probability)
loss_func(class=alc$high_use, prob=alc$probability)
loss_func<-function(class,prob){
n_wrong<-abs(class-prob)>0.5
mean(n_wrong)
}
loss_func(class=alc$high_use, prob=alc$probability)
bar<-ggplot(data=alc, aes(x=high_use))
bar+geom_bar
bar+geom_bar()
bar+geom_bar()
bar+facet_wrap("Pstatus","higher")+geom_bar()
bar+facet_wrap(c("Pstatus","higher"))+geom_bar()
bar+facet_wrap("Pstatus")+geom_bar()
bar+facet_wrap("studytime")
bar+facet_wrap("studytime")+geom_bar()
bar+facet_wrap("failures")+geom_bar()
bar+facet_wrap("higher")+geom_bar()
alc%>%group_by(Pstatus, studytime, failures, higher)%>%summarise(count=n(),high_use=high_use)
alc%>%group_by(Pstatus, studytime, failures, higher)%>%summarise(count=n(),high_use=high_use))
alc%>%group_by(Pstatus, studytime, failures, higher)%>%summarise(count=n(),high_use=mean(high_use))
alc%>%group_by(Pstatus, studytime, failures, higher)%>%summarise(count=n(),high_use=high_use)
alc%>%group_by(Pstatus, studytime, failures, higher)%>%summarise(count=n(),high_use=count(high_use))
box+geom_boxplot()+ylab("grade")
box<-ggplot(alc, aes(x=high_use, y=Pstatus))
box+geom_boxplot()+ylab("grade")
box+geom_boxplot()
box<-ggplot(alc, aes(x=high_use, y=failures))
box+geom_boxplot()
box<-ggplot(alc, aes(x=high_use, y=studytime))
box+geom_boxplot()
box+geom_boxplot()+ylab("grade")
box+geom_boxplot()
?table
table(high_use=alc$high_use, Pstatus=alc$Pstatus)
table(high_use=alc$high_use, Pstatus=alc$studytime)
table(high_use=alc$high_use, higher=alc$higher)
table(high_use=alc$high_use, failures=alc$failures)
table(high_use=alc$high_use, studytime=alc$studytime)
setwd("~/Documents/IODS-project)
write.csv(alc, file="alc.csv")
write.csv(alc, file="alc.csv")
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
setwd("~/Documents/IODS-project)
write.csv(alc, file="alc.csv")
setwd("~/Documents/IODS-project/Data")
setwd("~/Documents/IODS-project")
setwd("~/Documents/IODS-project")
write.csv(alc, file="alc.csv")
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
dim(alc)
glimpse(alc)
#Benjamin Roberts
#07/02/2017
#reading data into R
math<-read.table("student-mat.csv",sep=";",header=TRUE)
por<-read.csv("student-por.csv",sep=";",header=TRUE)
str(math)
str(por)
dim(math)
dim(por)
#Math is an array with 395 rows and 33 columns. Por is an array with 649 rows and 33 columns.
library(dplyr)
#Joining the two arrays/datasets using 13 variables/student identifiers and only keeping students that are in both datasets.
join_by<-c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por<-inner_join(math, por, by=join_by)
str(math_por)
dim(math_por)
#The combined dataset math_por has 382 rows and 53 columns.
alc<-select(math_por, one_of(join_by))
notjoined_columns<-colnames(math)[!colnames(math)%in%join_by]
for(column_name in notjoined_columns){
two_columns<-select(math_por,starts_with(column_name))
first_column<-select(two_columns,1)[[1]]
if(is.numeric(first_column)){
alc[column_name]<-round(rowMeans(two_columns))
}else {
alc[column_name]<-first_column
}
}
#Combining duplicate answers from columns that were not joined within the new dataset math_por to create the dataset alc, which has only the joined columns and the combined duplicate nonjoined columns.
alc<-mutate(alc, alc_use=(Dalc+Walc)/2)
alc<-mutate(alc, high_use=alc_use>2)
#Creating two new columns: alc_use, which is the average alcohol consumption across the weekend and weekdays; high_use, which is TRUE if alcohol_use is greater than 2, FALSE if not.
dim(alc)
glimpse(alc)
#The final dataset alc has 382 rows and 35 columns/variables.
setwd("~/Documents/IODS-project")
write.csv(alc, file="alc.csv")
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
#saving the dataset alc to the working directory
setwd("~/Documents/IODS-project")
write.csv(alc, file="alc.csv")
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
library(ggplot)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
library(ggplot2)
alc<-read.csv("alc.csv",row.names=1)
colnames(alc)
dim(alc)
```
```
alc<-read.csv("alc.csv",row.names=1)
dim(alc)
model2<-glm(high_use~studytime, data=alc, family="binomial")
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
select(alc, studytime, high_use, probability, prediction) %>% head(10)
select(alc, studytime, high_use, probability, prediction) %>% head(20)
}
loss_func<-function(class,prob){
n_wrong<-abs(class-prob)>0.5
mean(n_wrong)
}
loss_func(class=alc$high_use, prob=alc$probability)
model2<-glm(high_use~studytime, data=alc, family="binomial")
summary(model2)
.3209-.6029
model2<-glm(high_use~failures, data=alc, family="binomial")
summary(model2)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
OR<-coef(model)%>%exp
CI<-exp(confint(model))
cbind(OR,CI)
summary(model)
loss_func(class=alc$high_use, prob=alc$probability)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt"",sep="\t", header=TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt",sep="\t", header=TRUE)
summary(model)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt",sep="\t", header=TRUE)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
summary(model)
model<-glm(high_use~studytime+failures+higher, data=alc, family="binomial")
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt",sep="\t", header=TRUE)
colnames(alc)
dim(alc)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt",sep=",", header=TRUE)
colnames(alc)
dim(alc)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
summary(model)
alc <- read.csv("alc.csv",row.names=1)
colnames(alc)
dim(alc)
model<-glm(high_use~Pstatus+studytime+failures+higher, data=alc, family="binomial")
summary(model)
coef(model)
OR<-coef(model)%>%exp
CI<-exp(confint(model))
cbind(OR,CI)
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
model2<-glm(high_use~studytime, data=alc, family="binomial")
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
library(ggplot2)
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
OR<-coef(model)%>%exp
install.packages(tidyr)
install.packages(tidyr)
```{r}
install.packages("tidyr")
library(tidyr)
library(dplyr)
library(dplyr)
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
select(alc, studytime, high_use, probability, prediction) %>% head(20)
```
g<-ggplot(alc, aes(x=prediction, y=high_use, col=prediction))
g+geom_point()
g<-ggplot(alc, aes(x=probabilities, y=high_use, col=prediction))
g+geom_point()
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
probabilities<-predict(model, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
```
select(alc, studytime, high_use, probability, prediction) %>% head(20)
library(ggplot2)
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
probabilities<-predict(model2, type="response")
alc<-mutate(alc, probability=probabilities)
alc<-mutate(alc, prediction=probability>0.5)
table(high_use=alc$high_use, prediction=alc$prediction)
select(alc, studytime, high_use, probability, prediction) %>% head(20)
library(ggplot2)
g<-ggplot(alc, aes(x=probability, y=high_use, col=prediction))
g+geom_point()
install.packages("boot")
library(boot)
cv<-cv.glm(data=alc, cost=loss_func, glmfit=model, K=10)
cv$delta[1]
cv<-cv.glm(data=alc, cost=loss_func, glmfit=model2, K=10)
cv$delta[1]
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
boston_scaled<-scale(Boston)
summary(boston_scaled)
summary(Boston)
quants<-quantile(scale_crim)
quants<-quantile(scaled_crim)
scaled_crim<-boston_scaled$crim
quants<-quantile(scaled_crim)
boston_scaled<-scale(Boston)
scaled_crim<-boston_scaled$crim
boston_scaled$crim
quants<-quantile(scaled_crim)
string<-c("low", "med_low", "med_high", "high")
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
boston_scaled<-scale(Boston)
boston_scaled$crim
Boston$crim
boston_scaled$crim
dim(boston_scaled)
boston_scaled$crim
is.recursive(boston_scaled)
is.recursive(Boston)
boston_scaled<-data.frame(boston_scaled)
is.recursive(boston_scaled)
scaled_crim<-boston_scaled$crim
quants<-quantile(scaled_crim)
string<-c("low", "med_low", "med_high", "high")
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
boston_scaled<-dplyr::select(boston_scaled, -crim)
boston_scaled<-data.frame(boston_scaled, crime)
summary(crime)
summary(quants)
boston_scaled<-data.frame(boston_scaled, crime)
correct_classes<-test$crime
n<-nrow(boston_scaled)
samp<-sample(n, size=n*0.8)
train<-boston_scaled[samp,]
test<-boston_scaled[-samp,]
correct_classes<-test$crime
test<-dplyr::select(test,-crime)
lda.fit<-lda(crime~.,data=train)
train<-boston_scaled[samp,]
lda.fit<-lda(crime~.,data=train)
n<-nrow(boston_scaled)
samp<-sample(n, size=n*0.8)
train<-boston_scaled[samp,]
test<-boston_scaled[-samp,]
correct_classes<-test$crime
test<-dplyr::select(test,-crime)
lda.fit<-lda(crime~.,data=train)
dim(train)
dim(boston_scaled)
boston_scaled<-data.frame(boston_scaled)
scaled_crim<-boston_scaled$crim
boston_scaled
dim(boston_scaled)
dim(boston_scaled)
boston_scaled<-dplyr::select(boston_scaled, -crim)
boston_scaled<-data.frame(boston_scaled)
scaled_crim<-boston_scaled$crim
dim(boston_scaled)
quants<-quantile(scaled_crim)
summary(quants)
string<-c("low", "med_low", "med_high", "high")
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
scaled_crim<-as.numeric(scaled_crim)
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
summary(quants)
quants<-quantile(scaled_crim)
summary(quants)
boston_scaled<-data.frame(boston_scaled)
scaled_crim<-boston_scaled$crim
scaled_crim<-as.numeric(scaled_crim)
quants<-quantile(scaled_crim)
summary(quants)
library(MASS)
data("Boston")
boston_scaled<-scale(Boston)
scaled_crim<-boston_scaled$crim
quants<-quantile(scaled_crim)
summary(quants)
boston_scaled<-as.data.frame(boston_scaled)
scaled_crim<-boston_scaled$crim
dim(boston_scaled)
quants<-quantile(scaled_crim)
summary(quants)
string<-c("low", "med_low", "med_high", "high")
crime<-cut(scaled_crim, breaks=quants, include.lowest=TRUE, label=string)
summary(crime)
boston_scaled<-dplyr::select(boston_scaled, -crim)
boston_scaled<-data.frame(boston_scaled, crime)
dim(boston_scaled)
samp<-sample(n, size=n*0.8)
train<-boston_scaled[samp,]
test<-boston_scaled[-samp,]
correct_classes<-test$crime
test<-dplyr::select(test,-crime)
dim(train)
lda.fit<-lda(crime~.,data=train)
lda.fit
plot(lda.fit, dimen=2, col=classes, pch=classes)
classes<-as.numeric(train$crime)
plot(lda.fit, dimen=2, col=classes, pch=classes)
lda.arrows<-function(x, myscale=1, arrow_heads=0.1, color="red", tex=0.75, choices=c(1,2)){
heads<-coef(x)
arrows(x0=0, y0=0,
x1=myscale*heads[,choices[1]],
y1=myscale*heads[,choices[2]],
col=color, length=arrowheads)
text(myscale*heads[,choices],labels=row.names(heads),
cex=tex,col=color, pos=3)
}
plot(lda.fit, dimen=2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale=1)
lda.arrows<-function(x, myscale=1, arrow_heads=0.1, color="red", tex=0.75, choices=c(1,2)){
heads<-coef(x)
arrows(x0=0, y0=0,
x1=myscale*heads[,choices[1]],
y1=myscale*heads[,choices[2]],
col=color, length=arrowheads)
text(myscale*heads[,choices],labels=row.names(heads),
cex=tex,col=color, pos=3)
}
plot(lda.fit, dimen=2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale=1)
da.arrows<-function(x, myscale=1, arrow_heads=0.1, color="red", tex=0.75, choices=c(1,2)){
heads<-coef(x)
arrows(x0=0, y0=0,
x1=myscale*heads[,choices[1]],
y1=myscale*heads[,choices[2]],
col=color, length=arrow_heads)
text(myscale*heads[,choices],labels=row.names(heads),
cex=tex,col=color, pos=3)
}
plot(lda.fit, dimen=2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale=1)
lda.pred<-predict(lda.fit, newdata=test)
table(correct=correct_classes, predicted=lda.pred$class)
library(MASS)
data("Boston")
dist_eu<-dist(Boston)
summary(dist_eu)
km<-kmeans(dist_eu, centers=15)
km<-kmeans(dist_eu, centers=15)
twcss<-sapply(1:k_max, function(k){kmeans(dist_eu,k)tot.withinss})
plot(1:k_max, twcss, type='b')
library(MASS)
data("Boston")
boston_scaled<-scale(Boston)
dist_eu<-dist(boston_scaled)
summary(dist_eu)
km<-kmeans(dist_eu, centers=15)
k_max<-15
twcss<-sapply(1:k_max, function(k){kmeans(dist_eu,k)tot.withinss})
plot(1:k_max, twcss, type='b')
twcss<-sapply(1:k_max, function(k){kmeans(dist_eu,k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km2<-kmeans(dist_eu, centers=2)
pairs(Boston, col=km2$cluster)
ggpairs(Boston, col=km2$cluster)
ggpairs(Boston, col=km2$cluster)
